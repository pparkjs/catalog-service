name: Commit Stage
on: push

jobs:
  build:                      # 작업의 고유 식별자
    name: Build and Test      # 작업의 인간 친화적 명칭
    runs-on: ubuntu-22.04     # 작업이 실행될 머신의 유형
    permissions:              # 작업에 부여된 권한
      contents: read          # 현재 깃 저장소를 체크 아웃할 수 있는 권한 
      security-events: write  # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4    # 현재 깃 저장소(catalog-service)를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v4  # 저자바 런타임을 설치하고 설정한다.
        with:                        # 사용할 버전, 배포, 캐시 유형을 정의한다.
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build, unit tests and integration tests 
        run: |     # 코드베이스를 컴파일하고 단위 및 통합 테스트를 실행하는 그래들 빌드 작업을 수행한다.
          chmod +x gradlew                
          ./gradlew build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3      # 그라이프를 사용해 취약성을 스캔한다.
        id: scan                          # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고할 수 있다.
        with:
          path: "${{ github.workspace }}" # 체크아웃 저장소 패스
          fail-build: false               # 보안 취약성 발견 시 빌드 실패 여부
          severity-cutoff: high           # 오류로 간주할 최소 수준의 보안 유형(낮음, 중간, 높음, 치명적)
      - name: Upload vulnerability report 
        uses: github/codeql-action/upload-sarif@v3     # 깃허브로 보안 취약성 리포트(SARIF 형식)전송
        if: success() || failure()                     # 이전 단계가 실패하더라도 리포트 전송
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}  # 이전 단계 결과의 리포트를 가져온다.
